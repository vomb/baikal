import (
  "vomb/x/git"
  "vomb/x/dir"
  "vomb/x/proto"
)

// старт пайплайна с именем как у файла (api)

// объект параметров, на который можно ссылаться
// все объекты имеют глобальный путь
// например этот
// github.com/vomb/baikal/pipeline/api.config
// или в рамках текущей области видимости просто config
ctx config {
  string git = "github.com/vomb/baikal"
  string branch = "master"
  string key // должна быть объявлена снаружи при запуске пайплайна, например при подключении репы определена переменная pipeline.api.config.key
  
  from = "api/proto"
  to = "api"
  package = "api"
}

// запуск таски под именем apiChange
task apiChange = git.Subscribe({
  git: config.git,
  key: config.key,
  branch: config.branch,
  glob: config.from + "/**/*.proto",
})

// биндинг потока событий из apiChange в подпайплайн onChangeGenerate
apiChange.each (change) {
  onChangeGenerate({
    commit: { // доопределение внутренних ctx переменных
      git: change.git,
      ref: change.ref,
    }
  })
}

// дочерний пайплайн (api.onChangeGenerate)
pipeline onChangeGenerate {
  // при запуске данного пайлайна нет никаких подписок и т.д., поэтому просто все таски выполнятся последовательно один раз.
  ctx commit {
    string git = config.git
    string ref
  }

  workDir = dir.EmptyDir() // провайдер пустой временной дериктории, так как ресурс выделен на ноде, то и таски использующие ресурс запустятся на той же ноде в том же контейнере
  protoDir = workDir.MakeDir("./proto")
  goDir = workDir.MakeDir("./go")
  
  dir.FromGit({
    git: commit.git,
    ref: commit.ref,
    key: config.key,    
    
    from: config.from,
    to: protoDir,
  })
  
  proto.ToGo({
    from: protoDir,
    to: goDir,
    package: config.package,
  })
  
  proto.ToGit({
    git: config.git,
    from: goDir,
    to: config.to,
    
    git: config.git,
    key: config.key,
    branch: config.branch,
    
    deletePattern: "**/*.go",
  })
}

